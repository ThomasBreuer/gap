Tasks for MatrixObj
===================

Design Decisions
===================
- Decide the relation between 'IsMatrix' and 'IsMatrixObj'.

  (September 08th)
  We are going to use the following setup:
  - 'IsMatrixObj' implies 'IsMatrix'.
  - 'IsMatrixObj' does not imply 'IsOrdinaryMatrix'.
  - All current implementations of 'IsMatrixObj' representations
    are in fact intended for matrices with the ``usual'' matrix product
    and hence get the filter 'IsOrdinaryMatrix' (explicitly)
  - Whenever a method requires that some of its arguments are matrices
    that have to be multiplied via the ``usual'' matrix product,
    the filter 'IsOrdinaryMatrix' must be required for these arguments.

  (Thomas is going to make the necessary changes.)

- When multiplying PlistMatrixObjs we check whether the BaseDomains are
  identical. Should we adopt this everywhere?

- Decide and document what `ShallowCopy` should do for IsVectorObj 
  and IsMatrixObj objects. 
  Idea: For IsVectorObj define and document similar behaviour as for
  plain lists. For IsMatrixObj document it explicitly as undefined
  (but some implementations may provide a method); suggest to use
  `MutableCopyMat` for IsMatrixObj objects.

- matobj2.gd states that +,-,*,<,=, AddRowVector, AddMultVector are possible
  for vectors over the same BaseDomain and equal lengths.
  Should this mean 'only if'?

  (For example objects in 'Is8BitVectorRep' admit arithmetical operations
  when the lengths are different.  I would say that the general documentation
  should define the behaviour only for same lengths and equal BaseDomain,
  and say that special vector representations may support more general
  cases.)
  

Changes to IsMatrixObj
===================

- define 'DefaultRing' for the entries as default 'BaseDomain'
  of Plist vectors and matrices
  (Cheaper methods may be installed for special cases,
  for example 'Cyclotomics' should be good enough for plists of (plists of)
  cyclotomics, without computing conductors;
  analogous objects for finite characteristic seem not to be available.)

- introduce 'ZeroOfBaseDomain' (done)

- Define and implement 'EmptyMatrix' as IsMatrixObj

- Define, document and implement generic methods mentioned in matobj{1,2}.gd

- Provide test code.

- Provide further kinds of vectors/matrices.

- Rename *RowVector to *Vector like AddRowVector to AddVector


Adapting the library
===================

- Change method installations that match several declarations
  since 'IsMatrix' implies 'IsMatrixObj'.
  (For example, 'Length' is declared for 'IsList', 'IsVectorObj',
  and 'IsMatrixObj'.
  So 'Length' methods for 'IsMatrix' match two declarations.)

  (Thomas is going to do this.)

- In the (about 240) library methods that *require* 'IsMatrix',
  adjust the code according to the 'IsMatrixObj' interface.

- Get rid of 'Zero(m[1][1])', 'm[i][j]', and working with rows.

- In the (about 90) library methods that *call* 'IsMatrix',
  decide if one can use 'IsMatrixObj' instead.

- Change 'm[i][j]' to 'm[i,j]'.
  (Only where really matrices are affected?)

- Check the library methods that *create* matrices:
  What can be done in order to choose a suitable kind of matrix?

- Replace 'PositionNot( obj, zero )' by 'PositionNonZero( obj )'.
  (And change the default methods for 'PositionNonZero'.)
  (done)

- Replace 'EmptyMatrix' and 'NullMapMatrix' by 'IsMatrixObj' objects.
  Change GF2 and 8bit matrix code to support empty matrices

- various operations on gf2 and 8bit matrix objects can silently convert
  them to plists-of-plists; e.g. it is allows to unbind an element in the
  middle, or assign something in cross characteristic, etc. etc. and all of
  these work and silently convert the matrix/vector. I can't think of
  situations where I'd want that -- I'd really prefer to require the user to
  perform a manual conversion, and instead let accesses like the above
  generate an error, to help track down bugs.

- I'd like to rename `vecmat.{gi,gd}` to e.g. `vecmat_gf2.{gi,gd}`, to
  indicate the purpose of those files; and then move any generic methods for
  (compressed) matrices and vectors in it into another file


Documentation
===================
- add entry in programming language section of ref manual for
      x:=A[B];  and A[B]:=x;
    for arbitrary objects B

- Document and implement the interface.

- add entries for [] and []:= to MatrixObj chapter

- link to these from the list chapter entries for [] and []:= (and vice versa)

- Add a chapter 'How to use IsMatrixObj' to the documentation.
  There, add the following sections to the documentation:
  - which Methods should be implemented for new IsMatrixObj types so that
    the generic methods work for all new objects
  - list the generic methods. Say that these can/should be overwritten by
    more efficient specialized code.
  - Changes from IsMatrix to IsMatrixObj
  - how to convert existing IsMatrix code to adapt IsMatrixObj
  - deprecated usages of operations/functions

Additional notes by Max
=======================

- I am still unhappy about the name `FoldList`, and the whole function.
  The terms "fold" and "foldlist" have a fixed meaning in functional programming,
  see <https://en.wikipedia.org/wiki/Fold_(higher-order_function)>.
  Moreover, I wonder whether we really need a full global function for this?
  It seems to be used in only one place right now?

- I squashed @sebasguts work (and some fixes by others) into a single
  commit, simply because the existing commits were not broken into logical
  blocks (and often, contained changes not mentioned in the commit message).
  This can of course be split into separate commits again later on, though I
  actually don't think it's necessary for this

- there is some duplication between code this pull request adds, existing
  code we just commented out in this PR, and some code generic code which for
  some reason ended up in `vecmat.gi` (even though that file is meant for GF2
  code only -- which its name sadly does not reflect).
